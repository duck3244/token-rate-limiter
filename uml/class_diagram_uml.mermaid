classDiagram
    %% 모델 클래스
    class TokenUsage {
        -String modelId
        -String userId
        -int tokensUsed
        -LocalDateTime timestamp
        -String requestId
        +TokenUsage()
        +getters/setters()
    }
    
    %% 설정 클래스
    class TokenRateLimitConfig {
        -Map~String, ModelLimitConfig~ models
        +getModels()
        +setModels()
    }
    
    class ModelLimitConfig {
        -int maxTokensPerMinute
        -int maxTokensPerHour
        -int maxTokensPerDay
        -int maxConcurrentRequests
        +getters/setters()
    }
    
    %% 서비스 클래스들
    class TokenRateLimitService {
        -RedisTemplate redisTemplate
        -TokenRateLimitConfig config
        +checkTokenLimit(modelId, userId, tokens) Mono~Boolean~
        +recordTokenUsage(modelId, userId, tokens, requestId) Mono~Void~
        +getCurrentTokenUsage(modelId, userId) Mono~Map~
        -checkConcurrentRequests() boolean
        -updateTokenUsageInWindow() void
    }
    
    class ModelProxyService {
        -WebClient webClient
        -TokenRateLimitService rateLimitService
        -ModelRegistryService modelRegistryService
        +proxyToModel(request) Mono~ServerResponse~
        +getAvailableModels(request) Mono~ServerResponse~
        +checkModelHealth(request) Mono~ServerResponse~
        -forwardRequestToModel() Mono~ServerResponse~
        -estimateTokensFromRequest() int
    }
    
    class ModelRegistryService {
        -Map~String, String~ modelEndpoints
        -RedisTemplate redisTemplate
        +getModelEndpoint(modelId) Mono~String~
        +getAvailableModels() Mono~List~String~~
        +isModelHealthy(modelId) Mono~Boolean~
        +registerModel(modelId, endpoint) Mono~Void~
    }
    
    %% 필터 클래스
    class TokenRateLimitFilter {
        -TokenRateLimitService rateLimitService
        -ObjectMapper objectMapper
        +filter(exchange, chain) Mono~Void~
        -extractModelId(path) String
        -extractUserId(request) String
        -extractRequestedTokens(exchange) Mono~Integer~
    }
    
    %% 컨트롤러 클래스
    class TokenUsageController {
        -TokenRateLimitService rateLimitService
        +getTokenUsage(modelId, userId) Mono~ResponseEntity~
        +getUsageSummary() Mono~ResponseEntity~
        +health() Mono~ResponseEntity~
        +resetTokenUsage(modelId, userId) Mono~ResponseEntity~
    }
    
    %% 메트릭 클래스
    class TokenUsageMetrics {
        -MeterRegistry meterRegistry
        -Counter tokenUsageCounter
        -Timer requestTimer
        +recordTokenUsage(modelId, userId, tokens) void
        +recordRateLimitExceeded(modelId, userId, type) void
        +recordRequestTime(modelId, duration) void
    }
    
    %% 스케줄링 클래스
    class TokenUsageScheduledTasks {
        -RedisTemplate redisTemplate
        -TokenUsageMetrics metrics
        +collectHourlyStats() void
        +cleanupExpiredKeys() void
        +healthCheck() void
    }
    
    %% 예외 클래스들
    class TokenRateLimitExceededException {
        -int retryAfter
        -String limitType
        +getRetryAfter() int
        +getLimitType() String
    }
    
    class ModelNotFoundException {
        +ModelNotFoundException(modelId)
    }
    
    %% 라우터 설정
    class ModelProxyRouter {
        +modelRoutes(service) RouterFunction~ServerResponse~
    }
    
    %% 관계 설정
    TokenRateLimitConfig *-- ModelLimitConfig : contains
    TokenRateLimitService --> TokenRateLimitConfig : uses
    TokenRateLimitService --> TokenUsage : creates
    
    ModelProxyService --> TokenRateLimitService : uses
    ModelProxyService --> ModelRegistryService : uses
    
    TokenRateLimitFilter --> TokenRateLimitService : uses
    TokenUsageController --> TokenRateLimitService : uses
    
    TokenUsageScheduledTasks --> TokenUsageMetrics : uses
    
    ModelProxyRouter --> ModelProxyService : configures
    
    TokenRateLimitService ..> TokenRateLimitExceededException : throws
    ModelProxyService ..> ModelNotFoundException : throws