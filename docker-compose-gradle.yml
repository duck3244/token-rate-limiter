version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: token-limiter-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - token-limiter-network

  # Gradle 빌드를 포함한 애플리케이션
  token-rate-limiter:
    build:
      context: .
      dockerfile: Dockerfile.gradle
    container_name: token-rate-limiter
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
      - VLLM_LLAMA7B_URL=http://vllm-llama2-7b:8000
      - VLLM_LLAMA13B_URL=http://vllm-llama2-13b:8000
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - gradle_cache:/home/gradle/.gradle
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - token-limiter-network
    restart: unless-stopped

  # 개발용 Gradle 빌드 서비스 (선택적)
  gradle-build:
    build:
      context: .
      dockerfile: Dockerfile.gradle-dev
    container_name: gradle-build
    volumes:
      - .:/workspace
      - gradle_cache:/home/gradle/.gradle
    working_dir: /workspace
    command: ["./gradlew", "build", "--continuous"]
    networks:
      - token-limiter-network
    profiles:
      - dev

  # vLLM 모델 서버 예시
  vllm-llama2-7b:
    image: vllm/vllm-openai:latest
    container_name: vllm-llama2-7b
    ports:
      - "8001:8000"
    command: >
      python -m vllm.entrypoints.openai.api_server
      --model meta-llama/Llama-2-7b-chat-hf
      --host 0.0.0.0
      --port 8000
      --tensor-parallel-size 1
    environment:
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - model_cache:/root/.cache/huggingface
    networks:
      - token-limiter-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Prometheus (모니터링)
  prometheus:
    image: prom/prometheus:latest
    container_name: token-limiter-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - token-limiter-network

  # Grafana (대시보드)
  grafana:
    image: grafana/grafana:latest
    container_name: token-limiter-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - token-limiter-network

volumes:
  redis_data:
  model_cache:
  prometheus_data:
  grafana_data:
  gradle_cache:

networks:
  token-limiter-network:
    driver: bridge