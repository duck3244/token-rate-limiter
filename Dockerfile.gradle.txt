# Multi-stage Dockerfile for Gradle build
FROM gradle:8.5-jdk17-alpine AS builder

LABEL maintainer="your-email@example.com"
LABEL description="Token Rate Limiter for vLLM Model Serving - Gradle Build"

# 작업 디렉토리 설정
WORKDIR /app

# Gradle 캐시 최적화를 위해 의존성 관련 파일 먼저 복사
COPY build.gradle settings.gradle gradle.properties ./
COPY gradle/ gradle/

# 의존성 다운로드 (캐시 레이어)
RUN gradle dependencies --no-daemon

# 소스 코드 복사
COPY src/ src/

# 애플리케이션 빌드
RUN gradle bootJar --no-daemon

# Runtime stage
FROM openjdk:17-jre-alpine

LABEL maintainer="your-email@example.com"
LABEL description="Token Rate Limiter for vLLM Model Serving"

# 필요한 패키지 설치
RUN apk add --no-cache curl

# 애플리케이션 사용자 생성
RUN addgroup -g 1001 appgroup && \
    adduser -u 1001 -G appgroup -s /bin/sh -D appuser

# 작업 디렉토리 설정
WORKDIR /app

# 빌드된 JAR 파일 복사
COPY --from=builder /app/build/libs/*.jar app.jar

# 로그 디렉토리 생성 및 권한 설정
RUN mkdir -p /app/logs && \
    chown -R appuser:appgroup /app

# 포트 노출
EXPOSE 8080

# 헬스체크 설정
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1

# 사용자 변경
USER appuser

# JVM 옵션 설정
ENV JAVA_OPTS="-Xms512m -Xmx1g -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"

# 애플리케이션 실행
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]

---
# 개발용 Dockerfile (Dockerfile.gradle-dev)
FROM gradle:8.5-jdk17-alpine

LABEL description="Development environment for Token Rate Limiter"

# 필요한 패키지 설치
RUN apk add --no-cache curl git

# 작업 디렉토리 설정
WORKDIR /workspace

# Gradle 설정
ENV GRADLE_USER_HOME=/home/gradle/.gradle

# 개발 포트
EXPOSE 8080 5005

# 개발 환경 실행 명령
CMD ["./gradlew", "bootRun", "--args='--spring.profiles.active=dev'"]