# application-docker.yml - Docker 환경 설정
server:
  port: 8080
  shutdown: graceful
  address: 0.0.0.0  # Docker 컨테이너에서 모든 인터페이스에 바인딩

spring:
  profiles:
    active: docker
    
  data:
    redis:
      # Docker 컨테이너 간 통신
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 3000ms
      lettuce:
        pool:
          max-active: 15
          max-idle: 8
          min-idle: 3
          max-wait: 2000ms
        shutdown-timeout: 100ms
      # Docker 환경에서는 hostname 해결을 위한 추가 시간 필요
      client-type: lettuce
      
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false
      indent-output: false
    deserialization:
      fail-on-unknown-properties: false

# 토큰 사용량 제한 설정 (Docker 환경 - 중간 수준 제한)
token:
  rate-limit:
    enabled: true
    models:
      llama2-7b:
        max-tokens-per-minute: 3000
        max-tokens-per-hour: 30000
        max-tokens-per-day: 300000
        max-concurrent-requests: 15
      llama2-13b:
        max-tokens-per-minute: 2000
        max-tokens-per-hour: 20000
        max-tokens-per-day: 200000
        max-concurrent-requests: 10
      gpt-3.5-turbo:
        max-tokens-per-minute: 2500
        max-tokens-per-hour: 25000
        max-tokens-per-day: 250000
        max-concurrent-requests: 8
      gpt-4:
        max-tokens-per-minute: 1000
        max-tokens-per-hour: 10000
        max-tokens-per-day: 100000
        max-concurrent-requests: 5
    # Docker 환경 특별 설정
    circuit-breaker:
      enabled: true
      failure-threshold: 3
      recovery-timeout: 30000ms
    fallback:
      enabled: true

# vLLM 서비스 엔드포인트 (Docker 환경 - 컨테이너 이름 사용)
vllm:
  services:
    llama2-7b: ${VLLM_LLAMA7B_URL:http://vllm-llama2-7b:8000}
    llama2-13b: ${VLLM_LLAMA13B_URL:http://vllm-llama2-13b:8000}
    gpt-3.5-turbo: ${VLLM_GPT35_URL:http://vllm-gpt35:8000}
    gpt-4: ${VLLM_GPT4_URL:http://vllm-gpt4:8000}
  # Docker 네트워크에서는 더 긴 타임아웃이 필요할 수 있음
  connection-timeout: 8000ms
  read-timeout: 45000ms
  retry:
    max-attempts: 2
    backoff-delay: 1500ms
  # Docker 환경 연결 풀
  connection-pool:
    max-connections: 50
    max-connections-per-route: 10

# 액추에이터 설정 (Docker 환경 - 컨테이너 모니터링 고려)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    info:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
    env:
      show-values: when_authorized
  metrics:
    export:
      prometheus:
        enabled: true
        step: 15s
    tags:
      application: ${spring.application.name}
      environment: docker
      version: ${app.version:docker}
      container: ${HOSTNAME:unknown}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99

# 로깅 설정 (Docker 환경)
logging:
  level:
    root: INFO
    com.example.tokenratelimiter: DEBUG
    org.springframework.web: INFO
    org.springframework.data.redis: INFO
    io.lettuce.core: WARN
    reactor.netty: WARN
    io.micrometer: INFO
  pattern:
    # Docker에서는 stdout으로 로그를 보내므로 console 패턴이 중요
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  # Docker 환경에서는 파일 로깅 비활성화 (stdout/stderr 사용)
  file:
    name: /app/logs/application.log
    max-size: 50MB
    max-history: 3
    total-size-cap: 150MB

# Docker 환경 특별 설정
debug: false
trace: false

# 커스텀 Docker 설정
app:
  name: token-rate-limiter
  version: ${project.version:docker}
  environment: docker
  build-time: ${maven.build.timestamp:unknown}
  
  # Docker 환경 특정 설정
  docker:
    # 컨테이너 정보
    container-id: ${HOSTNAME:unknown}
    image-tag: ${IMAGE_TAG:latest}
    # Docker 네트워크 설정
    network:
      dns-resolution-timeout: 5000ms
      connection-retry-attempts: 3
    # 컨테이너 리소스 제한 고려
    resources:
      max-memory: ${JVM_MAX_MEMORY:1g}
      max-cpu: ${JVM_MAX_CPU:2}
    # 헬스체크 설정
    health-check:
      enabled: true
      interval: 30s
      timeout: 10s
      retries: 3
      start-period: 60s

# Docker 환경 보안 설정
security:
  # CORS 설정 (Docker Compose 네트워크 고려)
  cors:
    allowed-origins: 
      - "http://localhost:*"
      - "http://127.0.0.1:*"
      - "http://host.docker.internal:*"
    allowed-methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed-headers: ["*"]
    allow-credentials: true
  
  # JWT 설정 (Docker 환경)
  jwt:
    secret: ${JWT_SECRET:docker-jwt-secret-change-in-production}
    expiration: 3600000  # 1시간
    
  # API Key 설정
  api-key:
    header-name: X-API-Key
    default-key: ${API_KEY:docker-api-key}

# Docker WebFlux 설정
spring.webflux:
  base-path: /

# Docker 환경 JVM 설정
spring.jmx:
  enabled: true

# Docker 환경 스케줄링
scheduling:
  # Docker 컨테이너에서는 더 빈번한 정리 작업
  cleanup-interval: 600000      # 10분
  stats-interval: 180000        # 3분
  health-check-interval: 60000  # 1분

# Docker 네트워크 타임아웃 설정
network:
  timeouts:
    connection: 5000ms
    socket: 30000ms
    request: 60000ms

# Docker 환경 모니터링
monitoring:
  enabled: true
  container:
    # 컨테이너 메트릭 수집
    metrics: true
    # 리소스 모니터링
    resource-monitoring: true
  # 로그 집계 (Fluentd, ELK 스택과 연동)
  logging:
    aggregation: ${LOG_AGGREGATION:false}
    format: json

# Docker Compose 서비스 디스커버리
service-discovery:
  enabled: true
  services:
    redis: redis:6379
    prometheus: prometheus:9090
    grafana: grafana:3000
    vllm-llama2-7b: vllm-llama2-7b:8000
    vllm-llama2-13b: vllm-llama2-13b:8000

# Docker 환경 예외 처리
error-handling:
  include-stacktrace: on_param
  whitelabel:
    enabled: false

# Docker 환경 배치 작업
batch:
  cleanup:
    enabled: true
    cron: "0 */30 * * * ?"  # 30분마다 (Docker에서는 더 자주)
  statistics:
    enabled: true
    cron: "0 */10 * * * ?"  # 10분마다
  health-check:
    enabled: true
    cron: "0 */2 * * * ?"   # 2분마다

# Docker 환경 캐시 설정
cache:
  type: redis
  ttl: 300000ms  # 5분
  max-size: 1000

# Docker 환경 thread pool 설정
spring.task:
  execution:
    pool:
      core-size: 4
      max-size: 8
      queue-capacity: 50
  scheduling:
    pool:
      size: 2

# Docker Compose 통합 설정
integration:
  external-services:
    timeout: 10000ms
    retry-attempts: 2
    circuit-breaker-threshold: 5