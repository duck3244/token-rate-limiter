<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- Spring Boot Profile별 설정 -->
    <springProfile name="!prod">
        <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    </springProfile>

    <!-- 프로퍼티 정의 -->
    <property name="LOG_PATH" value="${LOG_PATH:-logs}"/>
    <property name="LOG_FILE" value="${LOG_FILE:-token-rate-limiter}"/>
    <property name="MAX_FILE_SIZE" value="${LOG_MAX_FILE_SIZE:-100MB}"/>
    <property name="MAX_HISTORY" value="${LOG_MAX_HISTORY:-30}"/>
    <property name="TOTAL_SIZE_CAP" value="${LOG_TOTAL_SIZE_CAP:-3GB}"/>

    <!-- 색상 패턴 정의 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!-- 개발 환경 콘솔 출력 -->
    <springProfile name="dev,docker">
        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%clr(%d{HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr([%X{traceId:-},%X{spanId:-}]){yellow} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx</pattern>
                <charset>UTF-8</charset>
            </encoder>
        </appender>
    </springProfile>

    <!-- 프로덕션 환경 콘솔 출력 -->
    <springProfile name="prod">
        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                <includeContext>true</includeContext>
                <includeMdc>true</includeMdc>
                <customFields>{"service":"token-rate-limiter","environment":"${spring.profiles.active:-unknown}"}</customFields>
                <fieldNames>
                    <timestamp>@timestamp</timestamp>
                    <message>message</message>
                    <level>level</level>
                    <thread>thread</thread>
                    <logger>logger</logger>
                </fieldNames>
            </encoder>
        </appender>
    </springProfile>

    <!-- 파일 출력 - 일반 로그 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE}.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE}-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 파일 출력 - 에러 로그 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE}-error.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n%ex</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE}-error-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 파일 출력 - 토큰 사용량 로그 -->
    <appender name="TOKEN_USAGE_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/token-usage.log</file>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <includeContext>true</includeContext>
            <includeMdc>true</includeMdc>
            <customFields>{"logType":"token-usage","service":"token-rate-limiter"}</customFields>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/token-usage-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>90</maxHistory>
            <totalSizeCap>5GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 파일 출력 - 성능 로그 -->
    <appender name="PERFORMANCE_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/performance.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/performance-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 비동기 파일 출력 -->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
        <queueSize>1024</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>false</includeCallerData>
    </appender>

    <appender name="ASYNC_ERROR_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="ERROR_FILE"/>
        <queueSize>256</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>true</includeCallerData>
    </appender>

    <!-- 특별한 로거들 -->
    
    <!-- 토큰 사용량 로거 -->
    <logger name="com.example.tokenratelimiter.service.TokenRateLimitService" level="INFO" additivity="false">
        <appender-ref ref="TOKEN_USAGE_FILE"/>
        <appender-ref ref="CONSOLE"/>
    </logger>

    <!-- 성능 관련 로거 -->
    <logger name="com.example.tokenratelimiter.metrics" level="INFO" additivity="false">
        <appender-ref ref="PERFORMANCE_FILE"/>
        <appender-ref ref="CONSOLE"/>
    </logger>

    <!-- 보안 관련 로거 -->
    <logger name="com.example.tokenratelimiter.filter.TokenRateLimitFilter" level="INFO" additivity="true">
        <springProfile name="prod">
            <level value="WARN"/>
        </springProfile>
    </logger>

    <!-- 외부 라이브러리 로그 레벨 조정 -->
    <logger name="org.springframework.web" level="WARN"/>
    <logger name="org.springframework.data.redis" level="WARN"/>
    <logger name="io.lettuce.core" level="WARN"/>
    <logger name="reactor.netty" level="WARN"/>
    <logger name="io.micrometer" level="INFO"/>
    <logger name="org.springframework.boot.actuate" level="INFO"/>

    <!-- 특별한 경우를 위한 로거 -->
    <logger name="org.springframework.security" level="DEBUG" additivity="false">
        <springProfile name="dev">
            <appender-ref ref="CONSOLE"/>
        </springProfile>
        <springProfile name="prod,docker">
            <level value="INFO"/>
            <appender-ref ref="ASYNC_FILE"/>
        </springProfile>
    </logger>

    <!-- HTTP 요청 로깅 (개발 환경에서만) -->
    <springProfile name="dev">
        <logger name="org.springframework.web.reactive.function.server" level="DEBUG"/>
        <logger name="org.springframework.http" level="DEBUG"/>
    </springProfile>

    <!-- 프로덕션 환경 JSON 로깅 -->
    <springProfile name="prod">
        <appender name="JSON_CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                <includeContext>true</includeContext>
                <includeMdc>true</includeMdc>
                <customFields>{"service":"token-rate-limiter","environment":"production"}</customFields>
                <fieldNames>
                    <timestamp>@timestamp</timestamp>
                    <message>message</message>
                    <level>level</level>
                    <thread>thread</thread>
                    <logger>logger</logger>
                </fieldNames>
            </encoder>
        </appender>
    </springProfile>

    <!-- Sentry 로그 전송 (프로덕션) -->
    <springProfile name="prod">
        <appender name="SENTRY" class="io.sentry.logback.SentryAppender">
            <minimumBreadcrumbLevel>INFO</minimumBreadcrumbLevel>
            <minimumEventLevel>WARN</minimumEventLevel>
        </appender>
    </springProfile>

    <!-- 환경별 Root Logger 설정 -->
    <springProfile name="dev">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="ASYNC_FILE"/>
            <appender-ref ref="ASYNC_ERROR_FILE"/>
        </root>
    </springProfile>

    <springProfile name="docker">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="ASYNC_FILE"/>
            <appender-ref ref="ASYNC_ERROR_FILE"/>
        </root>
    </springProfile>

    <springProfile name="prod">
        <root level="WARN">
            <appender-ref ref="JSON_CONSOLE"/>
            <appender-ref ref="ASYNC_FILE"/>
            <appender-ref ref="ASYNC_ERROR_FILE"/>
            <appender-ref ref="SENTRY"/>
        </root>
    </springProfile>

    <!-- 테스트 환경 -->
    <springProfile name="test">
        <root level="WARN">
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <!-- JMX를 통한 로그 레벨 동적 변경 활성화 -->
    <jmxConfigurator/>

    <!-- 로그 압축 및 삭제 정책 -->
    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
    </contextListener>

    <!-- 조건부 처리를 위한 패턴 -->
    <if condition='property("spring.profiles.active").contains("prod")'>
        <then>
            <!-- 프로덕션 환경에서는 더 엄격한 로깅 -->
            <logger name="com.example.tokenratelimiter" level="INFO"/>
        </then>
        <else>
            <!-- 개발 환경에서는 더 상세한 로깅 -->
            <logger name="com.example.tokenratelimiter" level="DEBUG"/>
        </else>
    </if>

    <!-- 로그 이벤트 필터 -->
    <turboFilter class="ch.qos.logback.classic.turbo.DuplicateMessageFilter">
        <allowedRepetitions>3</allowedRepetitions>
    </turboFilter>

    <!-- 로그백 상태 리스너 -->
    <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>

</configuration>